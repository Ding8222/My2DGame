// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ClientMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetData {

  /// <summary>Holder for reflection information generated from ClientMsg.proto</summary>
  public static partial class ClientMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9DbGllbnRNc2cucHJvdG8SB25ldERhdGEiBgoEUGluZyJkChRMb2FkUGxh",
            "eWVyRGF0YUZpbmlzaBINCgVuQ29kZRgBIAEoBRIPCgduVGVtcElEGAIgASgN",
            "IiwKAkVDEgwKCEVDX09USEVSEAASCwoHRUNfU1VDQxABEgsKB0VDX0ZBSUwQ",
            "AiItCgpQbGF5ZXJNb3ZlEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMg",
            "ASgCIlAKDVBsYXllck1vdmVSZXQSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkK",
            "AXoYAyABKAISDwoHblRlbXBJRBgEIAEoDRINCgVuQ29kZRgFIAEoBSI9CglD",
            "aGFuZ2VNYXASDgoGbk1hcElEGAEgASgFEg8KB3NFdG9rZW4YAiABKAkSDwoH",
            "c1NlY3JldBgDIAEoDCKnAQoMQ2hhbmdlTWFwUmV0Eg0KBW5Db2RlGAEgASgF",
            "Eg4KBm5NYXBJRBgCIAEoBRIPCgduVGVtcElEGAMgASgFImcKAkVDEgwKCEVD",
            "X09USEVSEAASCwoHRUNfU1VDQxABEgsKB0VDX0ZBSUwQAhILCgdFQ19MSU5F",
            "EAQSCgoGRUNfTUFQEAUSDwoLRUNfTEVBVkVNQVAQBhIPCgtFQ19QQUNLREFU",
            "QRAHIk8KDVVwZGF0YU9iakluZm8SCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkK",
            "AXoYAyABKAISDwoHblRlbXBJRBgEIAEoDRIMCgROYW1lGAUgASgJIiEKDkRl",
            "bE9iakZyb21WaWV3Eg8KB25UZW1wSUQYASABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.Ping), global::NetData.Ping.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.LoadPlayerDataFinish), global::NetData.LoadPlayerDataFinish.Parser, new[]{ "NCode", "NTempID" }, null, new[]{ typeof(global::NetData.LoadPlayerDataFinish.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.PlayerMove), global::NetData.PlayerMove.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.PlayerMoveRet), global::NetData.PlayerMoveRet.Parser, new[]{ "X", "Y", "Z", "NTempID", "NCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.ChangeMap), global::NetData.ChangeMap.Parser, new[]{ "NMapID", "SEtoken", "SSecret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.ChangeMapRet), global::NetData.ChangeMapRet.Parser, new[]{ "NCode", "NMapID", "NTempID" }, null, new[]{ typeof(global::NetData.ChangeMapRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.UpdataObjInfo), global::NetData.UpdataObjInfo.Parser, new[]{ "X", "Y", "Z", "NTempID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.DelObjFromView), global::NetData.DelObjFromView.Parser, new[]{ "NTempID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 3-1 ping
  /// </summary>
  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 3-2 通知Client数据加载完毕
  /// </summary>
  public sealed partial class LoadPlayerDataFinish : pb::IMessage<LoadPlayerDataFinish> {
    private static readonly pb::MessageParser<LoadPlayerDataFinish> _parser = new pb::MessageParser<LoadPlayerDataFinish>(() => new LoadPlayerDataFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadPlayerDataFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerDataFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerDataFinish(LoadPlayerDataFinish other) : this() {
      nCode_ = other.nCode_;
      nTempID_ = other.nTempID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerDataFinish Clone() {
      return new LoadPlayerDataFinish(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    /// <summary>
    /// 返回的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 2;
    private uint nTempID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadPlayerDataFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadPlayerDataFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (NTempID != other.NTempID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (NTempID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NTempID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NTempID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadPlayerDataFinish other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 16: {
            NTempID = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoadPlayerDataFinish message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// 3-3 请求移动
  /// </summary>
  public sealed partial class PlayerMove : pb::IMessage<PlayerMove> {
    private static readonly pb::MessageParser<PlayerMove> _parser = new pb::MessageParser<PlayerMove>(() => new PlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMove(PlayerMove other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMove Clone() {
      return new PlayerMove(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 3-4 移动返回
  /// </summary>
  public sealed partial class PlayerMoveRet : pb::IMessage<PlayerMoveRet> {
    private static readonly pb::MessageParser<PlayerMoveRet> _parser = new pb::MessageParser<PlayerMoveRet>(() => new PlayerMoveRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMoveRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRet(PlayerMoveRet other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      nTempID_ = other.nTempID_;
      nCode_ = other.nCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMoveRet Clone() {
      return new PlayerMoveRet(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 4;
    private uint nTempID_;
    /// <summary>
    ///对象的临时ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 5;
    private int nCode_;
    /// <summary>
    ///返回的错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMoveRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMoveRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (NTempID != other.NTempID) return false;
      if (NCode != other.NCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (NTempID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NTempID);
      }
      if (NCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NTempID);
      }
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMoveRet other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            NTempID = input.ReadUInt32();
            break;
          }
          case 40: {
            NCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 3-5 请求切换地图
  /// </summary>
  public sealed partial class ChangeMap : pb::IMessage<ChangeMap> {
    private static readonly pb::MessageParser<ChangeMap> _parser = new pb::MessageParser<ChangeMap>(() => new ChangeMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap(ChangeMap other) : this() {
      nMapID_ = other.nMapID_;
      sEtoken_ = other.sEtoken_;
      sSecret_ = other.sSecret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap Clone() {
      return new ChangeMap(this);
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 1;
    private int nMapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "sEtoken" field.</summary>
    public const int SEtokenFieldNumber = 2;
    private string sEtoken_ = "";
    /// <summary>
    /// 账号信息,前端不用填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SEtoken {
      get { return sEtoken_; }
      set {
        sEtoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sSecret" field.</summary>
    public const int SSecretFieldNumber = 3;
    private pb::ByteString sSecret_ = pb::ByteString.Empty;
    /// <summary>
    /// 秘钥,前端不用填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SSecret {
      get { return sSecret_; }
      set {
        sSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NMapID != other.NMapID) return false;
      if (SEtoken != other.SEtoken) return false;
      if (SSecret != other.SSecret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (SEtoken.Length != 0) hash ^= SEtoken.GetHashCode();
      if (SSecret.Length != 0) hash ^= SSecret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NMapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NMapID);
      }
      if (SEtoken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SEtoken);
      }
      if (SSecret.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SSecret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (SEtoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SEtoken);
      }
      if (SSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SSecret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeMap other) {
      if (other == null) {
        return;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.SEtoken.Length != 0) {
        SEtoken = other.SEtoken;
      }
      if (other.SSecret.Length != 0) {
        SSecret = other.SSecret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NMapID = input.ReadInt32();
            break;
          }
          case 18: {
            SEtoken = input.ReadString();
            break;
          }
          case 26: {
            SSecret = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 3-6 切换地图返回，如果涉及到换线，那么不会返回该消息，返回的是2-8
  /// </summary>
  public sealed partial class ChangeMapRet : pb::IMessage<ChangeMapRet> {
    private static readonly pb::MessageParser<ChangeMapRet> _parser = new pb::MessageParser<ChangeMapRet>(() => new ChangeMapRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeMapRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMapRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMapRet(ChangeMapRet other) : this() {
      nCode_ = other.nCode_;
      nMapID_ = other.nMapID_;
      nTempID_ = other.nTempID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMapRet Clone() {
      return new ChangeMapRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    /// <summary>
    /// 返回的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 2;
    private int nMapID_;
    /// <summary>
    /// 要加载的地图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 3;
    private int nTempID_;
    /// <summary>
    /// 新的tempid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeMapRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeMapRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (NMapID != other.NMapID) return false;
      if (NTempID != other.NTempID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (NMapID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NMapID);
      }
      if (NTempID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NTempID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTempID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeMapRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 16: {
            NMapID = input.ReadInt32();
            break;
          }
          case 24: {
            NTempID = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChangeMapRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        ///线路不存在
        /// </summary>
        [pbr::OriginalName("EC_LINE")] Line = 4,
        /// <summary>
        ///地图不存在
        /// </summary>
        [pbr::OriginalName("EC_MAP")] Map = 5,
        /// <summary>
        ///离开地图失败
        /// </summary>
        [pbr::OriginalName("EC_LEAVEMAP")] Leavemap = 6,
        /// <summary>
        ///打包数据失败
        /// </summary>
        [pbr::OriginalName("EC_PACKDATA")] Packdata = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// 3-7 更新对象信息（有则更新，无则添加）
  /// </summary>
  public sealed partial class UpdataObjInfo : pb::IMessage<UpdataObjInfo> {
    private static readonly pb::MessageParser<UpdataObjInfo> _parser = new pb::MessageParser<UpdataObjInfo>(() => new UpdataObjInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdataObjInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdataObjInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdataObjInfo(UpdataObjInfo other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      nTempID_ = other.nTempID_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdataObjInfo Clone() {
      return new UpdataObjInfo(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 4;
    private uint nTempID_;
    /// <summary>
    ///对象的临时ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdataObjInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdataObjInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (NTempID != other.NTempID) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (NTempID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NTempID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NTempID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdataObjInfo other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            NTempID = input.ReadUInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 3-8 删除视野中的对象
  /// </summary>
  public sealed partial class DelObjFromView : pb::IMessage<DelObjFromView> {
    private static readonly pb::MessageParser<DelObjFromView> _parser = new pb::MessageParser<DelObjFromView>(() => new DelObjFromView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelObjFromView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.ClientMsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelObjFromView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelObjFromView(DelObjFromView other) : this() {
      nTempID_ = other.nTempID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelObjFromView Clone() {
      return new DelObjFromView(this);
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 1;
    private uint nTempID_;
    /// <summary>
    ///对象的临时ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelObjFromView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelObjFromView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NTempID != other.NTempID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NTempID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NTempID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NTempID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelObjFromView other) {
      if (other == null) {
        return;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NTempID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
