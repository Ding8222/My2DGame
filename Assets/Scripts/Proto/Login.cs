// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetData {

  /// <summary>Holder for reflection information generated from Login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMb2dpbi5wcm90bxIHbmV0RGF0YSIfCglIYW5kU2hha2USEgoKc0NsaWVu",
            "dEtleRgBIAEoDCJzCgxIYW5kU2hha2VSZXQSDQoFbkNvZGUYASABKAUSEgoK",
            "c0NoYWxsZW5nZRgCIAEoDBISCgpzU2VydmVyS2V5GAMgASgMIiwKAkVDEgwK",
            "CEVDX09USEVSEAASCwoHRUNfU1VDQxABEgsKB0VDX0ZBSUwQAiIaCglDaGFs",
            "bGVuZ2USDQoFc0htYWMYASABKAkiSwoMQ2hhbGxlbmdlUmV0Eg0KBW5Db2Rl",
            "GAEgASgFIiwKAkVDEgwKCEVDX09USEVSEAASCwoHRUNfU1VDQxABEgsKB0VD",
            "X0ZBSUwQAiInCgRBdXRoEg8KB0FjY291bnQYASABKAkSDgoGU2VjcmV0GAIg",
            "ASgMIvcBCgdBdXRoUmV0Eg0KBW5Db2RlGAEgASgFEg8KB0FjY291bnQYAiAB",
            "KAkiywEKAkVDEgwKCEVDX09USEVSEAASCwoHRUNfU1VDQxABEgsKB0VDX0ZB",
            "SUwQAhIQCgxFQ19IQU5EU0hBS0UQAxIRCg1FQ19BRERBQ0NPVU5UEAQSCQoF",
            "RUNfREIQBRIPCgtFQ19BVVRISU5GTxAGEg4KCkVDX0FVVEhJTkcQBxILCgdF",
            "Q19LSUNLEAgSDQoJRUNfV0FUSU5HEAkSEAoMRUNfTE9HSU5USU1FEAoSDQoJ",
            "RUNfQ1JFQVRFEAsSDwoLRUNfREJTVEFVVFMQDCJGCgpQbGF5ZXJMaXRlEg0K",
            "BW5HdWlkGAEgASgDEg0KBXNOYW1lGAIgASgJEgwKBG5Kb2IYAyABKAUSDAoE",
            "blNleBgEIAEoBSIdCgpQbGF5ZXJMaXN0Eg8KB0FjY291bnQYASABKAkiMgoN",
            "UGxheWVyTGlzdFJldBIhCgRsaXN0GAEgAygLMhMubmV0RGF0YS5QbGF5ZXJM",
            "aXRlIqABCgxDcmVhdGVQbGF5ZXISDQoFc05hbWUYASABKAkSDAoEbkpvYhgC",
            "IAEoBRIMCgRuU2V4GAMgASgFEg8KB0FjY291bnQYBCABKAkSFQoNbk5hbWVD",
            "aGVja1JldBgFIAEoBSI9CgJFQxIMCghFQ19PVEhFUhAAEgsKB0VDX1NVQ0MQ",
            "ARILCgdFQ19GQUlMEAISDwoLRUNfUkVQRUFURUQQBCKhAQoPQ3JlYXRlUGxh",
            "eWVyUmV0Eg0KBW5Db2RlGAEgASgFEiEKBEluZm8YAiABKAsyEy5uZXREYXRh",
            "LlBsYXllckxpdGUiXAoCRUMSDAoIRUNfT1RIRVIQABILCgdFQ19TVUNDEAES",
            "CwoHRUNfRkFJTBACEg0KCUVDX0NSRUFURRADEg8KC0VDX1JFUEVBVEVEEAQS",
            "DgoKRUNfTkFNRVNWUhAFIh0KDFNlbGVjdFBsYXllchINCgVuR3VpZBgBIAEo",
            "AyLZAQoPU2VsZWN0UGxheWVyUmV0Eg0KBW5Db2RlGAEgASgFEg4KBm5NYXBJ",
            "RBgCIAEoBRIRCgluU2VydmVySUQYAyABKAUSDwoHbkxpbmVJRBgEIAEoBRIN",
            "CgVuUG9ydBgFIAEoBRILCgNzSVAYBiABKAkiZwoCRUMSDAoIRUNfT1RIRVIQ",
            "ABILCgdFQ19TVUNDEAESCwoHRUNfRkFJTBACEg0KCUVDX1NFUlZFUhADEgsK",
            "B0VDX0FVVEgQBBILCgdFQ19OT05FEAUSEAoMRUNfTE9HSU5USU1FEAYiKAoF",
            "TG9naW4SDwoHQWNjb3VudBgBIAEoCRIOCgZTZWNyZXQYAiABKAwiqwEKCExv",
            "Z2luUmV0Eg0KBW5Db2RlGAEgASgFEg8KB25UZW1wSUQYAiABKAUifwoCRUMS",
            "DAoIRUNfT1RIRVIQABILCgdFQ19TVUNDEAESCwoHRUNfRkFJTBACEg4KCkVD",
            "X0FDQ09VTlQQAxINCglFQ19TRUNSRVQQBBIPCgtFQ19DRU5URVJJRBAFEhAK",
            "DEVDX0FERFBMQVlFUhAGEg8KC0VDX0xPQUREQVRBEAdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.HandShake), global::NetData.HandShake.Parser, new[]{ "SClientKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.HandShakeRet), global::NetData.HandShakeRet.Parser, new[]{ "NCode", "SChallenge", "SServerKey" }, null, new[]{ typeof(global::NetData.HandShakeRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.Challenge), global::NetData.Challenge.Parser, new[]{ "SHmac" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.ChallengeRet), global::NetData.ChallengeRet.Parser, new[]{ "NCode" }, null, new[]{ typeof(global::NetData.ChallengeRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.Auth), global::NetData.Auth.Parser, new[]{ "Account", "Secret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.AuthRet), global::NetData.AuthRet.Parser, new[]{ "NCode", "Account" }, null, new[]{ typeof(global::NetData.AuthRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.PlayerLite), global::NetData.PlayerLite.Parser, new[]{ "NGuid", "SName", "NJob", "NSex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.PlayerList), global::NetData.PlayerList.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.PlayerListRet), global::NetData.PlayerListRet.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.CreatePlayer), global::NetData.CreatePlayer.Parser, new[]{ "SName", "NJob", "NSex", "Account", "NNameCheckRet" }, null, new[]{ typeof(global::NetData.CreatePlayer.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.CreatePlayerRet), global::NetData.CreatePlayerRet.Parser, new[]{ "NCode", "Info" }, null, new[]{ typeof(global::NetData.CreatePlayerRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.SelectPlayer), global::NetData.SelectPlayer.Parser, new[]{ "NGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.SelectPlayerRet), global::NetData.SelectPlayerRet.Parser, new[]{ "NCode", "NMapID", "NServerID", "NLineID", "NPort", "SIP" }, null, new[]{ typeof(global::NetData.SelectPlayerRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.Login), global::NetData.Login.Parser, new[]{ "Account", "Secret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetData.LoginRet), global::NetData.LoginRet.Parser, new[]{ "NCode", "NTempID" }, null, new[]{ typeof(global::NetData.LoginRet.Types.EC) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 2-1 握手
  /// </summary>
  public sealed partial class HandShake : pb::IMessage<HandShake> {
    private static readonly pb::MessageParser<HandShake> _parser = new pb::MessageParser<HandShake>(() => new HandShake());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandShake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShake(HandShake other) : this() {
      sClientKey_ = other.sClientKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShake Clone() {
      return new HandShake(this);
    }

    /// <summary>Field number for the "sClientKey" field.</summary>
    public const int SClientKeyFieldNumber = 1;
    private pb::ByteString sClientKey_ = pb::ByteString.Empty;
    /// <summary>
    ///base64encode(randomkey)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SClientKey {
      get { return sClientKey_; }
      set {
        sClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandShake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandShake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SClientKey != other.SClientKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SClientKey.Length != 0) hash ^= SClientKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SClientKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SClientKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SClientKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandShake other) {
      if (other == null) {
        return;
      }
      if (other.SClientKey.Length != 0) {
        SClientKey = other.SClientKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SClientKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-2 握手返回
  /// </summary>
  public sealed partial class HandShakeRet : pb::IMessage<HandShakeRet> {
    private static readonly pb::MessageParser<HandShakeRet> _parser = new pb::MessageParser<HandShakeRet>(() => new HandShakeRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandShakeRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShakeRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShakeRet(HandShakeRet other) : this() {
      nCode_ = other.nCode_;
      sChallenge_ = other.sChallenge_;
      sServerKey_ = other.sServerKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandShakeRet Clone() {
      return new HandShakeRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    /// <summary>
    ///握手结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "sChallenge" field.</summary>
    public const int SChallengeFieldNumber = 2;
    private pb::ByteString sChallenge_ = pb::ByteString.Empty;
    /// <summary>
    ///base64encode(randomkey)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SChallenge {
      get { return sChallenge_; }
      set {
        sChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sServerKey" field.</summary>
    public const int SServerKeyFieldNumber = 3;
    private pb::ByteString sServerKey_ = pb::ByteString.Empty;
    /// <summary>
    ///base64encode(dhexchange(randomkey))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SServerKey {
      get { return sServerKey_; }
      set {
        sServerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandShakeRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandShakeRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (SChallenge != other.SChallenge) return false;
      if (SServerKey != other.SServerKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (SChallenge.Length != 0) hash ^= SChallenge.GetHashCode();
      if (SServerKey.Length != 0) hash ^= SServerKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (SChallenge.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SChallenge);
      }
      if (SServerKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SServerKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (SChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SChallenge);
      }
      if (SServerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SServerKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandShakeRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.SChallenge.Length != 0) {
        SChallenge = other.SChallenge;
      }
      if (other.SServerKey.Length != 0) {
        SServerKey = other.SServerKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 18: {
            SChallenge = input.ReadBytes();
            break;
          }
          case 26: {
            SServerKey = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HandShakeRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// 2-3 挑战握手
  /// </summary>
  public sealed partial class Challenge : pb::IMessage<Challenge> {
    private static readonly pb::MessageParser<Challenge> _parser = new pb::MessageParser<Challenge>(() => new Challenge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Challenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge(Challenge other) : this() {
      sHmac_ = other.sHmac_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge Clone() {
      return new Challenge(this);
    }

    /// <summary>Field number for the "sHmac" field.</summary>
    public const int SHmacFieldNumber = 1;
    private string sHmac_ = "";
    /// <summary>
    ///base64encode(hmac64(nChallenge,secret))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SHmac {
      get { return sHmac_; }
      set {
        sHmac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Challenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Challenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SHmac != other.SHmac) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SHmac.Length != 0) hash ^= SHmac.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SHmac.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SHmac);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SHmac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SHmac);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Challenge other) {
      if (other == null) {
        return;
      }
      if (other.SHmac.Length != 0) {
        SHmac = other.SHmac;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SHmac = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-4 挑战握手返回
  /// </summary>
  public sealed partial class ChallengeRet : pb::IMessage<ChallengeRet> {
    private static readonly pb::MessageParser<ChallengeRet> _parser = new pb::MessageParser<ChallengeRet>(() => new ChallengeRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRet(ChallengeRet other) : this() {
      nCode_ = other.nCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRet Clone() {
      return new ChallengeRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    /// <summary>
    ///握手结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChallengeRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// 2-5 认证(账号密码)
  /// </summary>
  public sealed partial class Auth : pb::IMessage<Auth> {
    private static readonly pb::MessageParser<Auth> _parser = new pb::MessageParser<Auth>(() => new Auth());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Auth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth(Auth other) : this() {
      account_ = other.account_;
      secret_ = other.secret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth Clone() {
      return new Auth(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///token:base64encode(账号)@base64encode(要登陆的服务器ID)@base64encode(密码)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Secret" field.</summary>
    public const int SecretFieldNumber = 2;
    private pb::ByteString secret_ = pb::ByteString.Empty;
    /// <summary>
    ///client不用填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Auth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Auth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Secret != other.Secret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Secret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Auth other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Secret = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-6 认证返回
  /// </summary>
  public sealed partial class AuthRet : pb::IMessage<AuthRet> {
    private static readonly pb::MessageParser<AuthRet> _parser = new pb::MessageParser<AuthRet>(() => new AuthRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRet(AuthRet other) : this() {
      nCode_ = other.nCode_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRet Clone() {
      return new AuthRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        /// 握手失败
        /// </summary>
        [pbr::OriginalName("EC_HANDSHAKE")] Handshake = 3,
        /// <summary>
        /// Login添加账号失败
        /// </summary>
        [pbr::OriginalName("EC_ADDACCOUNT")] Addaccount = 4,
        /// <summary>
        /// 数据库查询失败
        /// </summary>
        [pbr::OriginalName("EC_DB")] Db = 5,
        /// <summary>
        /// 没有找到认证信息
        /// </summary>
        [pbr::OriginalName("EC_AUTHINFO")] Authinfo = 6,
        /// <summary>
        /// 正在认证中，稍后再试
        /// </summary>
        [pbr::OriginalName("EC_AUTHING")] Authing = 7,
        /// <summary>
        /// 已经将在线玩家踢下线，请重试
        /// </summary>
        [pbr::OriginalName("EC_KICK")] Kick = 8,
        /// <summary>
        /// 系统正在踢在线玩家，请稍微
        /// </summary>
        [pbr::OriginalName("EC_WATING")] Wating = 9,
        /// <summary>
        /// 更新账号登陆时间失败
        /// </summary>
        [pbr::OriginalName("EC_LOGINTIME")] Logintime = 10,
        /// <summary>
        /// 创建账号失败
        /// </summary>
        [pbr::OriginalName("EC_CREATE")] Create = 11,
        /// <summary>
        /// 数据库没有启动
        /// </summary>
        [pbr::OriginalName("EC_DBSTAUTS")] Dbstauts = 12,
      }

    }
    #endregion

  }

  public sealed partial class PlayerLite : pb::IMessage<PlayerLite> {
    private static readonly pb::MessageParser<PlayerLite> _parser = new pb::MessageParser<PlayerLite>(() => new PlayerLite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLite(PlayerLite other) : this() {
      nGuid_ = other.nGuid_;
      sName_ = other.sName_;
      nJob_ = other.nJob_;
      nSex_ = other.nSex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLite Clone() {
      return new PlayerLite(this);
    }

    /// <summary>Field number for the "nGuid" field.</summary>
    public const int NGuidFieldNumber = 1;
    private long nGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NGuid {
      get { return nGuid_; }
      set {
        nGuid_ = value;
      }
    }

    /// <summary>Field number for the "sName" field.</summary>
    public const int SNameFieldNumber = 2;
    private string sName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SName {
      get { return sName_; }
      set {
        sName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nJob" field.</summary>
    public const int NJobFieldNumber = 3;
    private int nJob_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NJob {
      get { return nJob_; }
      set {
        nJob_ = value;
      }
    }

    /// <summary>Field number for the "nSex" field.</summary>
    public const int NSexFieldNumber = 4;
    private int nSex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NSex {
      get { return nSex_; }
      set {
        nSex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NGuid != other.NGuid) return false;
      if (SName != other.SName) return false;
      if (NJob != other.NJob) return false;
      if (NSex != other.NSex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NGuid != 0L) hash ^= NGuid.GetHashCode();
      if (SName.Length != 0) hash ^= SName.GetHashCode();
      if (NJob != 0) hash ^= NJob.GetHashCode();
      if (NSex != 0) hash ^= NSex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NGuid);
      }
      if (SName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SName);
      }
      if (NJob != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NJob);
      }
      if (NSex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NSex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGuid);
      }
      if (SName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SName);
      }
      if (NJob != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NJob);
      }
      if (NSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NSex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLite other) {
      if (other == null) {
        return;
      }
      if (other.NGuid != 0L) {
        NGuid = other.NGuid;
      }
      if (other.SName.Length != 0) {
        SName = other.SName;
      }
      if (other.NJob != 0) {
        NJob = other.NJob;
      }
      if (other.NSex != 0) {
        NSex = other.NSex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NGuid = input.ReadInt64();
            break;
          }
          case 18: {
            SName = input.ReadString();
            break;
          }
          case 24: {
            NJob = input.ReadInt32();
            break;
          }
          case 32: {
            NSex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-7 请求角色列表
  /// </summary>
  public sealed partial class PlayerList : pb::IMessage<PlayerList> {
    private static readonly pb::MessageParser<PlayerList> _parser = new pb::MessageParser<PlayerList>(() => new PlayerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerList(PlayerList other) : this() {
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerList Clone() {
      return new PlayerList(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// 空消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerList other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-8 返回角色列表
  /// </summary>
  public sealed partial class PlayerListRet : pb::IMessage<PlayerListRet> {
    private static readonly pb::MessageParser<PlayerListRet> _parser = new pb::MessageParser<PlayerListRet>(() => new PlayerListRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerListRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerListRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerListRet(PlayerListRet other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerListRet Clone() {
      return new PlayerListRet(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetData.PlayerLite> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::NetData.PlayerLite.Parser);
    private readonly pbc::RepeatedField<global::NetData.PlayerLite> list_ = new pbc::RepeatedField<global::NetData.PlayerLite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetData.PlayerLite> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerListRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerListRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerListRet other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-9 请求创建角色
  /// </summary>
  public sealed partial class CreatePlayer : pb::IMessage<CreatePlayer> {
    private static readonly pb::MessageParser<CreatePlayer> _parser = new pb::MessageParser<CreatePlayer>(() => new CreatePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayer(CreatePlayer other) : this() {
      sName_ = other.sName_;
      nJob_ = other.nJob_;
      nSex_ = other.nSex_;
      account_ = other.account_;
      nNameCheckRet_ = other.nNameCheckRet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayer Clone() {
      return new CreatePlayer(this);
    }

    /// <summary>Field number for the "sName" field.</summary>
    public const int SNameFieldNumber = 1;
    private string sName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SName {
      get { return sName_; }
      set {
        sName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nJob" field.</summary>
    public const int NJobFieldNumber = 2;
    private int nJob_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NJob {
      get { return nJob_; }
      set {
        nJob_ = value;
      }
    }

    /// <summary>Field number for the "nSex" field.</summary>
    public const int NSexFieldNumber = 3;
    private int nSex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NSex {
      get { return nSex_; }
      set {
        nSex_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 4;
    private string account_ = "";
    /// <summary>
    ///请求不用填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nNameCheckRet" field.</summary>
    public const int NNameCheckRetFieldNumber = 5;
    private int nNameCheckRet_;
    /// <summary>
    ///名称检查服务器返回的结果，请求不用填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NNameCheckRet {
      get { return nNameCheckRet_; }
      set {
        nNameCheckRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SName != other.SName) return false;
      if (NJob != other.NJob) return false;
      if (NSex != other.NSex) return false;
      if (Account != other.Account) return false;
      if (NNameCheckRet != other.NNameCheckRet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SName.Length != 0) hash ^= SName.GetHashCode();
      if (NJob != 0) hash ^= NJob.GetHashCode();
      if (NSex != 0) hash ^= NSex.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (NNameCheckRet != 0) hash ^= NNameCheckRet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SName);
      }
      if (NJob != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NJob);
      }
      if (NSex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NSex);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Account);
      }
      if (NNameCheckRet != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NNameCheckRet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SName);
      }
      if (NJob != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NJob);
      }
      if (NSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NSex);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (NNameCheckRet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NNameCheckRet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayer other) {
      if (other == null) {
        return;
      }
      if (other.SName.Length != 0) {
        SName = other.SName;
      }
      if (other.NJob != 0) {
        NJob = other.NJob;
      }
      if (other.NSex != 0) {
        NSex = other.NSex;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.NNameCheckRet != 0) {
        NNameCheckRet = other.NNameCheckRet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SName = input.ReadString();
            break;
          }
          case 16: {
            NJob = input.ReadInt32();
            break;
          }
          case 24: {
            NSex = input.ReadInt32();
            break;
          }
          case 34: {
            Account = input.ReadString();
            break;
          }
          case 40: {
            NNameCheckRet = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreatePlayer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        ///名称重复
        /// </summary>
        [pbr::OriginalName("EC_REPEATED")] Repeated = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// 2-10 创建角色返回
  /// </summary>
  public sealed partial class CreatePlayerRet : pb::IMessage<CreatePlayerRet> {
    private static readonly pb::MessageParser<CreatePlayerRet> _parser = new pb::MessageParser<CreatePlayerRet>(() => new CreatePlayerRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayerRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerRet(CreatePlayerRet other) : this() {
      nCode_ = other.nCode_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerRet Clone() {
      return new CreatePlayerRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::NetData.PlayerLite info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetData.PlayerLite Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayerRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayerRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayerRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::NetData.PlayerLite();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::NetData.PlayerLite();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreatePlayerRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        [pbr::OriginalName("EC_CREATE")] Create = 3,
        /// <summary>
        ///名称重复
        /// </summary>
        [pbr::OriginalName("EC_REPEATED")] Repeated = 4,
        /// <summary>
        ///名称检查服务器未连接
        /// </summary>
        [pbr::OriginalName("EC_NAMESVR")] Namesvr = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// 2-11 请求选择角色
  /// </summary>
  public sealed partial class SelectPlayer : pb::IMessage<SelectPlayer> {
    private static readonly pb::MessageParser<SelectPlayer> _parser = new pb::MessageParser<SelectPlayer>(() => new SelectPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayer(SelectPlayer other) : this() {
      nGuid_ = other.nGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayer Clone() {
      return new SelectPlayer(this);
    }

    /// <summary>Field number for the "nGuid" field.</summary>
    public const int NGuidFieldNumber = 1;
    private long nGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NGuid {
      get { return nGuid_; }
      set {
        nGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NGuid != other.NGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NGuid != 0L) hash ^= NGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectPlayer other) {
      if (other == null) {
        return;
      }
      if (other.NGuid != 0L) {
        NGuid = other.NGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NGuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-12 选择角色返回
  /// </summary>
  public sealed partial class SelectPlayerRet : pb::IMessage<SelectPlayerRet> {
    private static readonly pb::MessageParser<SelectPlayerRet> _parser = new pb::MessageParser<SelectPlayerRet>(() => new SelectPlayerRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectPlayerRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayerRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayerRet(SelectPlayerRet other) : this() {
      nCode_ = other.nCode_;
      nMapID_ = other.nMapID_;
      nServerID_ = other.nServerID_;
      nLineID_ = other.nLineID_;
      nPort_ = other.nPort_;
      sIP_ = other.sIP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPlayerRet Clone() {
      return new SelectPlayerRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 2;
    private int nMapID_;
    /// <summary>
    /// 要加载的地图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 3;
    private int nServerID_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    /// <summary>Field number for the "nLineID" field.</summary>
    public const int NLineIDFieldNumber = 4;
    private int nLineID_;
    /// <summary>
    /// 线路ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLineID {
      get { return nLineID_; }
      set {
        nLineID_ = value;
      }
    }

    /// <summary>Field number for the "nPort" field.</summary>
    public const int NPortFieldNumber = 5;
    private int nPort_;
    /// <summary>
    /// 服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPort {
      get { return nPort_; }
      set {
        nPort_ = value;
      }
    }

    /// <summary>Field number for the "sIP" field.</summary>
    public const int SIPFieldNumber = 6;
    private string sIP_ = "";
    /// <summary>
    /// 需要去连接的服务器ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SIP {
      get { return sIP_; }
      set {
        sIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectPlayerRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectPlayerRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (NMapID != other.NMapID) return false;
      if (NServerID != other.NServerID) return false;
      if (NLineID != other.NLineID) return false;
      if (NPort != other.NPort) return false;
      if (SIP != other.SIP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (NServerID != 0) hash ^= NServerID.GetHashCode();
      if (NLineID != 0) hash ^= NLineID.GetHashCode();
      if (NPort != 0) hash ^= NPort.GetHashCode();
      if (SIP.Length != 0) hash ^= SIP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (NMapID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NMapID);
      }
      if (NServerID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NServerID);
      }
      if (NLineID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NLineID);
      }
      if (NPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NPort);
      }
      if (SIP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SIP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (NServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerID);
      }
      if (NLineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLineID);
      }
      if (NPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPort);
      }
      if (SIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SIP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectPlayerRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.NServerID != 0) {
        NServerID = other.NServerID;
      }
      if (other.NLineID != 0) {
        NLineID = other.NLineID;
      }
      if (other.NPort != 0) {
        NPort = other.NPort;
      }
      if (other.SIP.Length != 0) {
        SIP = other.SIP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 16: {
            NMapID = input.ReadInt32();
            break;
          }
          case 24: {
            NServerID = input.ReadInt32();
            break;
          }
          case 32: {
            NLineID = input.ReadInt32();
            break;
          }
          case 40: {
            NPort = input.ReadInt32();
            break;
          }
          case 50: {
            SIP = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SelectPlayerRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        /// 服务器未开启
        /// </summary>
        [pbr::OriginalName("EC_SERVER")] Server = 3,
        /// <summary>
        /// 未认证
        /// </summary>
        [pbr::OriginalName("EC_AUTH")] Auth = 4,
        /// <summary>
        /// 找有找到角色
        /// </summary>
        [pbr::OriginalName("EC_NONE")] None = 5,
        /// <summary>
        /// 更新登陆时间失败
        /// </summary>
        [pbr::OriginalName("EC_LOGINTIME")] Logintime = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// 2-13 登陆
  /// </summary>
  public sealed partial class Login : pb::IMessage<Login> {
    private static readonly pb::MessageParser<Login> _parser = new pb::MessageParser<Login>(() => new Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login(Login other) : this() {
      account_ = other.account_;
      secret_ = other.secret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login Clone() {
      return new Login(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// handshake = base64encode(token.user)@base64encode(token.server)#base64encode(subid):index)
    /// hmac = hmac64(hashkey(handshake), secret)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Secret" field.</summary>
    public const int SecretFieldNumber = 2;
    private pb::ByteString secret_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Secret != other.Secret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Secret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Secret = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2-14 登录返回
  /// </summary>
  public sealed partial class LoginRet : pb::IMessage<LoginRet> {
    private static readonly pb::MessageParser<LoginRet> _parser = new pb::MessageParser<LoginRet>(() => new LoginRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetData.LoginReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet(LoginRet other) : this() {
      nCode_ = other.nCode_;
      nTempID_ = other.nTempID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet Clone() {
      return new LoginRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "nTempID" field.</summary>
    public const int NTempIDFieldNumber = 2;
    private int nTempID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NTempID {
      get { return nTempID_; }
      set {
        nTempID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (NTempID != other.NTempID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (NTempID != 0) hash ^= NTempID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (NTempID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NTempID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (NTempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTempID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.NTempID != 0) {
        NTempID = other.NTempID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 16: {
            NTempID = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoginRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        ///没有账号信息
        /// </summary>
        [pbr::OriginalName("EC_ACCOUNT")] Account = 3,
        /// <summary>
        ///秘钥错误
        /// </summary>
        [pbr::OriginalName("EC_SECRET")] Secret = 4,
        /// <summary>
        ///中心服务器分配id失败
        /// </summary>
        [pbr::OriginalName("EC_CENTERID")] Centerid = 5,
        /// <summary>
        ///逻辑服添加玩家失败
        /// </summary>
        [pbr::OriginalName("EC_ADDPLAYER")] Addplayer = 6,
        /// <summary>
        ///逻辑服加载玩家数据失败
        /// </summary>
        [pbr::OriginalName("EC_LOADDATA")] Loaddata = 7,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
