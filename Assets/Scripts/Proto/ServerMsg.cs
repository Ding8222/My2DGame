// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ServerMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SvrData {

  /// <summary>Holder for reflection information generated from ServerMsg.proto</summary>
  public static partial class ServerMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for ServerMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TZXJ2ZXJNc2cucHJvdG8SB3N2ckRhdGEiBgoEUGluZyJaCg5TZXJ2ZXJS",
            "ZWdpc3RlchIRCgluU2VydmVySUQYASABKAUSEwoLblNlcnZlclR5cGUYAiAB",
            "KAUSEgoKbkNvbm5lY3RJRBgDIAEoBRIMCgROYW1lGAQgASgJIn4KEVNlcnZl",
            "clJlZ2lzdGVyUmV0EhAKCG5SZXRDb2RlGAEgASgFIlcKAkVDEgwKCEVDX09U",
            "SEVSEAASCwoHRUNfU1VDQxABEhYKEkVDX1NFUlZFUl9JRF9FWElTVBACEh4K",
            "GkVDX1RPX0NPTk5FQ1RfSURfTk9UX0VRVUFMEAMingEKDlNlcnZlckxvYWRJ",
            "bmZvEg8KB25MaW5lSUQYASABKAUSEgoKbk1heENsaWVudBgCIAEoBRISCgpu",
            "Tm93Q2xpZW50GAMgASgFEg0KBW5Qb3J0GAQgASgFEgsKA3NJUBgFIAEoCRIN",
            "CgVtYXBpZBgGIAMoBRIoCgRpbmZvGAcgAygLMhouc3ZyRGF0YS5BZGRQbGF5",
            "ZXJUb0NlbnRlciJEChBVcGRhdGVTZXJ2ZXJMb2FkEhcKD25DbGllbnRDb3Vu",
            "dE5vdxgBIAEoBRIXCg9uQ2xpZW50Q291bnRNYXgYAiABKAUiaAoRQWRkUGxh",
            "eWVyVG9DZW50ZXISDQoFbkd1aWQYASABKAMSDwoHbkdhbWVJRBgCIAEoAxIR",
            "CgluQ2xpZW50SUQYAyABKAUSDwoHbkdhdGVJRBgEIAEoBRIPCgdBY2NvdW50",
            "GAUgASgJIi0KCURlbENsaWVudBIPCgdBY2NvdW50GAEgASgJEg8KB09mZkxp",
            "bmUYAiABKAgiaAoNQ2xpZW50QWNjb3VudBIPCgduR2FtZUlEGAEgASgFEg8K",
            "B0FjY291bnQYAiABKAkSDgoGU2VjcmV0GAMgASgMEiUKBERhdGEYBCABKAsy",
            "Fy5zdnJEYXRhLkxvYWRQbGF5ZXJEYXRhIuoBCg5Mb2FkUGxheWVyRGF0YRIP",
            "CgdBY2NvdW50GAEgASgJEgwKBE5hbWUYAiABKAkSDQoFbkd1aWQYAyABKAMS",
            "DAoEblNleBgEIAEoBRIMCgRuSm9iGAUgASgFEg4KBm5MZXZlbBgGIAEoBRIT",
            "CgtuQ3JlYXRlVGltZRgHIAEoAxISCgpuTG9naW5UaW1lGAggASgDEg4KBm5N",
            "YXBJRBgJIAEoBRIKCgJuWBgKIAEoAhIKCgJuWRgLIAEoAhIKCgJuWhgMIAEo",
            "AhITCgtiQ2hhbmdlTGluZRgNIAEoCBIMCgREYXRhGA4gASgMImUKCkNoYW5n",
            "ZUxpbmUSDgoGbk1hcElEGAEgASgFEg8KB25MaW5lSUQYAiABKAUSDwoHbkdh",
            "bWVJRBgDIAEoBRIlCgREYXRhGAQgASgLMhcuc3ZyRGF0YS5Mb2FkUGxheWVy",
            "RGF0YSJ8Cg1DaGFuZ2VMaW5lUmV0Eg0KBW5Db2RlGAEgASgFEg4KBm5NYXBJ",
            "RBgCIAEoBRIPCgduTGluZUlEGAMgASgFIjsKAkVDEgwKCEVDX09USEVSEAAS",
            "CwoHRUNfU1VDQxABEgsKB0VDX0ZBSUwQAhINCglFQ19TRVJWRVIQAyIMCgpL",
            "aWNrQ2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.Ping), global::SvrData.Ping.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ServerRegister), global::SvrData.ServerRegister.Parser, new[]{ "NServerID", "NServerType", "NConnectID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ServerRegisterRet), global::SvrData.ServerRegisterRet.Parser, new[]{ "NRetCode" }, null, new[]{ typeof(global::SvrData.ServerRegisterRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ServerLoadInfo), global::SvrData.ServerLoadInfo.Parser, new[]{ "NLineID", "NMaxClient", "NNowClient", "NPort", "SIP", "Mapid", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.UpdateServerLoad), global::SvrData.UpdateServerLoad.Parser, new[]{ "NClientCountNow", "NClientCountMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.AddPlayerToCenter), global::SvrData.AddPlayerToCenter.Parser, new[]{ "NGuid", "NGameID", "NClientID", "NGateID", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.DelClient), global::SvrData.DelClient.Parser, new[]{ "Account", "OffLine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ClientAccount), global::SvrData.ClientAccount.Parser, new[]{ "NGameID", "Account", "Secret", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.LoadPlayerData), global::SvrData.LoadPlayerData.Parser, new[]{ "Account", "Name", "NGuid", "NSex", "NJob", "NLevel", "NCreateTime", "NLoginTime", "NMapID", "NX", "NY", "NZ", "BChangeLine", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ChangeLine), global::SvrData.ChangeLine.Parser, new[]{ "NMapID", "NLineID", "NGameID", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.ChangeLineRet), global::SvrData.ChangeLineRet.Parser, new[]{ "NCode", "NMapID", "NLineID" }, null, new[]{ typeof(global::SvrData.ChangeLineRet.Types.EC) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SvrData.KickClient), global::SvrData.KickClient.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 0-1 ping
  /// </summary>
  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 0-2 请求服务器注册
  /// </summary>
  public sealed partial class ServerRegister : pb::IMessage<ServerRegister> {
    private static readonly pb::MessageParser<ServerRegister> _parser = new pb::MessageParser<ServerRegister>(() => new ServerRegister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegister(ServerRegister other) : this() {
      nServerID_ = other.nServerID_;
      nServerType_ = other.nServerType_;
      nConnectID_ = other.nConnectID_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegister Clone() {
      return new ServerRegister(this);
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 1;
    private int nServerID_;
    /// <summary>
    /// 此服的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    /// <summary>Field number for the "nServerType" field.</summary>
    public const int NServerTypeFieldNumber = 2;
    private int nServerType_;
    /// <summary>
    /// 此服的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerType {
      get { return nServerType_; }
      set {
        nServerType_ = value;
      }
    }

    /// <summary>Field number for the "nConnectID" field.</summary>
    public const int NConnectIDFieldNumber = 3;
    private int nConnectID_;
    /// <summary>
    /// 要连接的服的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NConnectID {
      get { return nConnectID_; }
      set {
        nConnectID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// 此服名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NServerID != other.NServerID) return false;
      if (NServerType != other.NServerType) return false;
      if (NConnectID != other.NConnectID) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NServerID != 0) hash ^= NServerID.GetHashCode();
      if (NServerType != 0) hash ^= NServerType.GetHashCode();
      if (NConnectID != 0) hash ^= NConnectID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NServerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NServerID);
      }
      if (NServerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NServerType);
      }
      if (NConnectID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NConnectID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerID);
      }
      if (NServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerType);
      }
      if (NConnectID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NConnectID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRegister other) {
      if (other == null) {
        return;
      }
      if (other.NServerID != 0) {
        NServerID = other.NServerID;
      }
      if (other.NServerType != 0) {
        NServerType = other.NServerType;
      }
      if (other.NConnectID != 0) {
        NConnectID = other.NConnectID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NServerID = input.ReadInt32();
            break;
          }
          case 16: {
            NServerType = input.ReadInt32();
            break;
          }
          case 24: {
            NConnectID = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-3 服务器注册返回
  /// </summary>
  public sealed partial class ServerRegisterRet : pb::IMessage<ServerRegisterRet> {
    private static readonly pb::MessageParser<ServerRegisterRet> _parser = new pb::MessageParser<ServerRegisterRet>(() => new ServerRegisterRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRegisterRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRet(ServerRegisterRet other) : this() {
      nRetCode_ = other.nRetCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRet Clone() {
      return new ServerRegisterRet(this);
    }

    /// <summary>Field number for the "nRetCode" field.</summary>
    public const int NRetCodeFieldNumber = 1;
    private int nRetCode_;
    /// <summary>
    /// 返回的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NRetCode {
      get { return nRetCode_; }
      set {
        nRetCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRegisterRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRegisterRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NRetCode != other.NRetCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NRetCode != 0) hash ^= NRetCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NRetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NRetCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NRetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRetCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRegisterRet other) {
      if (other == null) {
        return;
      }
      if (other.NRetCode != 0) {
        NRetCode = other.NRetCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NRetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerRegisterRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_SERVER_ID_EXIST")] ServerIdExist = 2,
        [pbr::OriginalName("EC_TO_CONNECT_ID_NOT_EQUAL")] ToConnectIdNotEqual = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// 0-4 发送服务器负载
  /// </summary>
  public sealed partial class ServerLoadInfo : pb::IMessage<ServerLoadInfo> {
    private static readonly pb::MessageParser<ServerLoadInfo> _parser = new pb::MessageParser<ServerLoadInfo>(() => new ServerLoadInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerLoadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoadInfo(ServerLoadInfo other) : this() {
      nLineID_ = other.nLineID_;
      nMaxClient_ = other.nMaxClient_;
      nNowClient_ = other.nNowClient_;
      nPort_ = other.nPort_;
      sIP_ = other.sIP_;
      mapid_ = other.mapid_.Clone();
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoadInfo Clone() {
      return new ServerLoadInfo(this);
    }

    /// <summary>Field number for the "nLineID" field.</summary>
    public const int NLineIDFieldNumber = 1;
    private int nLineID_;
    /// <summary>
    /// 线路ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLineID {
      get { return nLineID_; }
      set {
        nLineID_ = value;
      }
    }

    /// <summary>Field number for the "nMaxClient" field.</summary>
    public const int NMaxClientFieldNumber = 2;
    private int nMaxClient_;
    /// <summary>
    /// 最大Client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMaxClient {
      get { return nMaxClient_; }
      set {
        nMaxClient_ = value;
      }
    }

    /// <summary>Field number for the "nNowClient" field.</summary>
    public const int NNowClientFieldNumber = 3;
    private int nNowClient_;
    /// <summary>
    /// 当前Client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NNowClient {
      get { return nNowClient_; }
      set {
        nNowClient_ = value;
      }
    }

    /// <summary>Field number for the "nPort" field.</summary>
    public const int NPortFieldNumber = 4;
    private int nPort_;
    /// <summary>
    /// 端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPort {
      get { return nPort_; }
      set {
        nPort_ = value;
      }
    }

    /// <summary>Field number for the "sIP" field.</summary>
    public const int SIPFieldNumber = 5;
    private string sIP_ = "";
    /// <summary>
    /// IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SIP {
      get { return sIP_; }
      set {
        sIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_mapid_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> mapid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 加载了哪些地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Mapid {
      get { return mapid_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SvrData.AddPlayerToCenter> _repeated_info_codec
        = pb::FieldCodec.ForMessage(58, global::SvrData.AddPlayerToCenter.Parser);
    private readonly pbc::RepeatedField<global::SvrData.AddPlayerToCenter> info_ = new pbc::RepeatedField<global::SvrData.AddPlayerToCenter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SvrData.AddPlayerToCenter> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerLoadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerLoadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NLineID != other.NLineID) return false;
      if (NMaxClient != other.NMaxClient) return false;
      if (NNowClient != other.NNowClient) return false;
      if (NPort != other.NPort) return false;
      if (SIP != other.SIP) return false;
      if(!mapid_.Equals(other.mapid_)) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NLineID != 0) hash ^= NLineID.GetHashCode();
      if (NMaxClient != 0) hash ^= NMaxClient.GetHashCode();
      if (NNowClient != 0) hash ^= NNowClient.GetHashCode();
      if (NPort != 0) hash ^= NPort.GetHashCode();
      if (SIP.Length != 0) hash ^= SIP.GetHashCode();
      hash ^= mapid_.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NLineID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NLineID);
      }
      if (NMaxClient != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NMaxClient);
      }
      if (NNowClient != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NNowClient);
      }
      if (NPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPort);
      }
      if (SIP.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SIP);
      }
      mapid_.WriteTo(output, _repeated_mapid_codec);
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NLineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLineID);
      }
      if (NMaxClient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMaxClient);
      }
      if (NNowClient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NNowClient);
      }
      if (NPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPort);
      }
      if (SIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SIP);
      }
      size += mapid_.CalculateSize(_repeated_mapid_codec);
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerLoadInfo other) {
      if (other == null) {
        return;
      }
      if (other.NLineID != 0) {
        NLineID = other.NLineID;
      }
      if (other.NMaxClient != 0) {
        NMaxClient = other.NMaxClient;
      }
      if (other.NNowClient != 0) {
        NNowClient = other.NNowClient;
      }
      if (other.NPort != 0) {
        NPort = other.NPort;
      }
      if (other.SIP.Length != 0) {
        SIP = other.SIP;
      }
      mapid_.Add(other.mapid_);
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NLineID = input.ReadInt32();
            break;
          }
          case 16: {
            NMaxClient = input.ReadInt32();
            break;
          }
          case 24: {
            NNowClient = input.ReadInt32();
            break;
          }
          case 32: {
            NPort = input.ReadInt32();
            break;
          }
          case 42: {
            SIP = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            mapid_.AddEntriesFrom(input, _repeated_mapid_codec);
            break;
          }
          case 58: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-5 服务器负载更新
  /// </summary>
  public sealed partial class UpdateServerLoad : pb::IMessage<UpdateServerLoad> {
    private static readonly pb::MessageParser<UpdateServerLoad> _parser = new pb::MessageParser<UpdateServerLoad>(() => new UpdateServerLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateServerLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerLoad(UpdateServerLoad other) : this() {
      nClientCountNow_ = other.nClientCountNow_;
      nClientCountMax_ = other.nClientCountMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerLoad Clone() {
      return new UpdateServerLoad(this);
    }

    /// <summary>Field number for the "nClientCountNow" field.</summary>
    public const int NClientCountNowFieldNumber = 1;
    private int nClientCountNow_;
    /// <summary>
    /// 服务器当前client数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClientCountNow {
      get { return nClientCountNow_; }
      set {
        nClientCountNow_ = value;
      }
    }

    /// <summary>Field number for the "nClientCountMax" field.</summary>
    public const int NClientCountMaxFieldNumber = 2;
    private int nClientCountMax_;
    /// <summary>
    /// 服务器最大client数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClientCountMax {
      get { return nClientCountMax_; }
      set {
        nClientCountMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateServerLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateServerLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NClientCountNow != other.NClientCountNow) return false;
      if (NClientCountMax != other.NClientCountMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NClientCountNow != 0) hash ^= NClientCountNow.GetHashCode();
      if (NClientCountMax != 0) hash ^= NClientCountMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NClientCountNow != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NClientCountNow);
      }
      if (NClientCountMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NClientCountMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NClientCountNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClientCountNow);
      }
      if (NClientCountMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClientCountMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateServerLoad other) {
      if (other == null) {
        return;
      }
      if (other.NClientCountNow != 0) {
        NClientCountNow = other.NClientCountNow;
      }
      if (other.NClientCountMax != 0) {
        NClientCountMax = other.NClientCountMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NClientCountNow = input.ReadInt32();
            break;
          }
          case 16: {
            NClientCountMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-6 新的client连接
  /// </summary>
  public sealed partial class AddPlayerToCenter : pb::IMessage<AddPlayerToCenter> {
    private static readonly pb::MessageParser<AddPlayerToCenter> _parser = new pb::MessageParser<AddPlayerToCenter>(() => new AddPlayerToCenter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPlayerToCenter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlayerToCenter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlayerToCenter(AddPlayerToCenter other) : this() {
      nGuid_ = other.nGuid_;
      nGameID_ = other.nGameID_;
      nClientID_ = other.nClientID_;
      nGateID_ = other.nGateID_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlayerToCenter Clone() {
      return new AddPlayerToCenter(this);
    }

    /// <summary>Field number for the "nGuid" field.</summary>
    public const int NGuidFieldNumber = 1;
    private long nGuid_;
    /// <summary>
    /// 玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NGuid {
      get { return nGuid_; }
      set {
        nGuid_ = value;
      }
    }

    /// <summary>Field number for the "nGameID" field.</summary>
    public const int NGameIDFieldNumber = 2;
    private long nGameID_;
    /// <summary>
    /// gameid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NGameID {
      get { return nGameID_; }
      set {
        nGameID_ = value;
      }
    }

    /// <summary>Field number for the "nClientID" field.</summary>
    public const int NClientIDFieldNumber = 3;
    private int nClientID_;
    /// <summary>
    /// clientid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClientID {
      get { return nClientID_; }
      set {
        nClientID_ = value;
      }
    }

    /// <summary>Field number for the "nGateID" field.</summary>
    public const int NGateIDFieldNumber = 4;
    private int nGateID_;
    /// <summary>
    /// 所属网关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGateID {
      get { return nGateID_; }
      set {
        nGateID_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 5;
    private string account_ = "";
    /// <summary>
    /// 账号信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPlayerToCenter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPlayerToCenter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NGuid != other.NGuid) return false;
      if (NGameID != other.NGameID) return false;
      if (NClientID != other.NClientID) return false;
      if (NGateID != other.NGateID) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NGuid != 0L) hash ^= NGuid.GetHashCode();
      if (NGameID != 0L) hash ^= NGameID.GetHashCode();
      if (NClientID != 0) hash ^= NClientID.GetHashCode();
      if (NGateID != 0) hash ^= NGateID.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NGuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NGuid);
      }
      if (NGameID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NGameID);
      }
      if (NClientID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NClientID);
      }
      if (NGateID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NGateID);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGuid);
      }
      if (NGameID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGameID);
      }
      if (NClientID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClientID);
      }
      if (NGateID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGateID);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPlayerToCenter other) {
      if (other == null) {
        return;
      }
      if (other.NGuid != 0L) {
        NGuid = other.NGuid;
      }
      if (other.NGameID != 0L) {
        NGameID = other.NGameID;
      }
      if (other.NClientID != 0) {
        NClientID = other.NClientID;
      }
      if (other.NGateID != 0) {
        NGateID = other.NGateID;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NGuid = input.ReadInt64();
            break;
          }
          case 16: {
            NGameID = input.ReadInt64();
            break;
          }
          case 24: {
            NClientID = input.ReadInt32();
            break;
          }
          case 32: {
            NGateID = input.ReadInt32();
            break;
          }
          case 42: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-8 client断开
  /// </summary>
  public sealed partial class DelClient : pb::IMessage<DelClient> {
    private static readonly pb::MessageParser<DelClient> _parser = new pb::MessageParser<DelClient>(() => new DelClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelClient(DelClient other) : this() {
      account_ = other.account_;
      offLine_ = other.offLine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelClient Clone() {
      return new DelClient(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OffLine" field.</summary>
    public const int OffLineFieldNumber = 2;
    private bool offLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OffLine {
      get { return offLine_; }
      set {
        offLine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (OffLine != other.OffLine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (OffLine != false) hash ^= OffLine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (OffLine != false) {
        output.WriteRawTag(16);
        output.WriteBool(OffLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (OffLine != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelClient other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.OffLine != false) {
        OffLine = other.OffLine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            OffLine = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-9 ClientToken
  /// </summary>
  public sealed partial class ClientAccount : pb::IMessage<ClientAccount> {
    private static readonly pb::MessageParser<ClientAccount> _parser = new pb::MessageParser<ClientAccount>(() => new ClientAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAccount(ClientAccount other) : this() {
      nGameID_ = other.nGameID_;
      account_ = other.account_;
      secret_ = other.secret_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAccount Clone() {
      return new ClientAccount(this);
    }

    /// <summary>Field number for the "nGameID" field.</summary>
    public const int NGameIDFieldNumber = 1;
    private int nGameID_;
    /// <summary>
    ///要去的逻辑服ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGameID {
      get { return nGameID_; }
      set {
        nGameID_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    /// 账号信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Secret" field.</summary>
    public const int SecretFieldNumber = 3;
    private pb::ByteString secret_ = pb::ByteString.Empty;
    /// <summary>
    /// 秘钥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::SvrData.LoadPlayerData data_;
    /// <summary>
    /// 玩家数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvrData.LoadPlayerData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NGameID != other.NGameID) return false;
      if (Account != other.Account) return false;
      if (Secret != other.Secret) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NGameID != 0) hash ^= NGameID.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NGameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NGameID);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Secret);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NGameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGameID);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientAccount other) {
      if (other == null) {
        return;
      }
      if (other.NGameID != 0) {
        NGameID = other.NGameID;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::SvrData.LoadPlayerData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NGameID = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Secret = input.ReadBytes();
            break;
          }
          case 34: {
            if (data_ == null) {
              data_ = new global::SvrData.LoadPlayerData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-10 通知game加载玩家数据
  /// </summary>
  public sealed partial class LoadPlayerData : pb::IMessage<LoadPlayerData> {
    private static readonly pb::MessageParser<LoadPlayerData> _parser = new pb::MessageParser<LoadPlayerData>(() => new LoadPlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadPlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerData(LoadPlayerData other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      nGuid_ = other.nGuid_;
      nSex_ = other.nSex_;
      nJob_ = other.nJob_;
      nLevel_ = other.nLevel_;
      nCreateTime_ = other.nCreateTime_;
      nLoginTime_ = other.nLoginTime_;
      nMapID_ = other.nMapID_;
      nX_ = other.nX_;
      nY_ = other.nY_;
      nZ_ = other.nZ_;
      bChangeLine_ = other.bChangeLine_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPlayerData Clone() {
      return new LoadPlayerData(this);
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nGuid" field.</summary>
    public const int NGuidFieldNumber = 3;
    private long nGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NGuid {
      get { return nGuid_; }
      set {
        nGuid_ = value;
      }
    }

    /// <summary>Field number for the "nSex" field.</summary>
    public const int NSexFieldNumber = 4;
    private int nSex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NSex {
      get { return nSex_; }
      set {
        nSex_ = value;
      }
    }

    /// <summary>Field number for the "nJob" field.</summary>
    public const int NJobFieldNumber = 5;
    private int nJob_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NJob {
      get { return nJob_; }
      set {
        nJob_ = value;
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int NLevelFieldNumber = 6;
    private int nLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "nCreateTime" field.</summary>
    public const int NCreateTimeFieldNumber = 7;
    private long nCreateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NCreateTime {
      get { return nCreateTime_; }
      set {
        nCreateTime_ = value;
      }
    }

    /// <summary>Field number for the "nLoginTime" field.</summary>
    public const int NLoginTimeFieldNumber = 8;
    private long nLoginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NLoginTime {
      get { return nLoginTime_; }
      set {
        nLoginTime_ = value;
      }
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 9;
    private int nMapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "nX" field.</summary>
    public const int NXFieldNumber = 10;
    private float nX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NX {
      get { return nX_; }
      set {
        nX_ = value;
      }
    }

    /// <summary>Field number for the "nY" field.</summary>
    public const int NYFieldNumber = 11;
    private float nY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NY {
      get { return nY_; }
      set {
        nY_ = value;
      }
    }

    /// <summary>Field number for the "nZ" field.</summary>
    public const int NZFieldNumber = 12;
    private float nZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NZ {
      get { return nZ_; }
      set {
        nZ_ = value;
      }
    }

    /// <summary>Field number for the "bChangeLine" field.</summary>
    public const int BChangeLineFieldNumber = 13;
    private bool bChangeLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BChangeLine {
      get { return bChangeLine_; }
      set {
        bChangeLine_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 14;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadPlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadPlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (NGuid != other.NGuid) return false;
      if (NSex != other.NSex) return false;
      if (NJob != other.NJob) return false;
      if (NLevel != other.NLevel) return false;
      if (NCreateTime != other.NCreateTime) return false;
      if (NLoginTime != other.NLoginTime) return false;
      if (NMapID != other.NMapID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NX, other.NX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NY, other.NY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NZ, other.NZ)) return false;
      if (BChangeLine != other.BChangeLine) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NGuid != 0L) hash ^= NGuid.GetHashCode();
      if (NSex != 0) hash ^= NSex.GetHashCode();
      if (NJob != 0) hash ^= NJob.GetHashCode();
      if (NLevel != 0) hash ^= NLevel.GetHashCode();
      if (NCreateTime != 0L) hash ^= NCreateTime.GetHashCode();
      if (NLoginTime != 0L) hash ^= NLoginTime.GetHashCode();
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (NX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NX);
      if (NY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NY);
      if (NZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NZ);
      if (BChangeLine != false) hash ^= BChangeLine.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NGuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NGuid);
      }
      if (NSex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NSex);
      }
      if (NJob != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NJob);
      }
      if (NLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NLevel);
      }
      if (NCreateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NCreateTime);
      }
      if (NLoginTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NLoginTime);
      }
      if (NMapID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NMapID);
      }
      if (NX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(NX);
      }
      if (NY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(NY);
      }
      if (NZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NZ);
      }
      if (BChangeLine != false) {
        output.WriteRawTag(104);
        output.WriteBool(BChangeLine);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NGuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGuid);
      }
      if (NSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NSex);
      }
      if (NJob != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NJob);
      }
      if (NLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLevel);
      }
      if (NCreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NCreateTime);
      }
      if (NLoginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NLoginTime);
      }
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (NX != 0F) {
        size += 1 + 4;
      }
      if (NY != 0F) {
        size += 1 + 4;
      }
      if (NZ != 0F) {
        size += 1 + 4;
      }
      if (BChangeLine != false) {
        size += 1 + 1;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadPlayerData other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NGuid != 0L) {
        NGuid = other.NGuid;
      }
      if (other.NSex != 0) {
        NSex = other.NSex;
      }
      if (other.NJob != 0) {
        NJob = other.NJob;
      }
      if (other.NLevel != 0) {
        NLevel = other.NLevel;
      }
      if (other.NCreateTime != 0L) {
        NCreateTime = other.NCreateTime;
      }
      if (other.NLoginTime != 0L) {
        NLoginTime = other.NLoginTime;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.NX != 0F) {
        NX = other.NX;
      }
      if (other.NY != 0F) {
        NY = other.NY;
      }
      if (other.NZ != 0F) {
        NZ = other.NZ;
      }
      if (other.BChangeLine != false) {
        BChangeLine = other.BChangeLine;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            NGuid = input.ReadInt64();
            break;
          }
          case 32: {
            NSex = input.ReadInt32();
            break;
          }
          case 40: {
            NJob = input.ReadInt32();
            break;
          }
          case 48: {
            NLevel = input.ReadInt32();
            break;
          }
          case 56: {
            NCreateTime = input.ReadInt64();
            break;
          }
          case 64: {
            NLoginTime = input.ReadInt64();
            break;
          }
          case 72: {
            NMapID = input.ReadInt32();
            break;
          }
          case 85: {
            NX = input.ReadFloat();
            break;
          }
          case 93: {
            NY = input.ReadFloat();
            break;
          }
          case 101: {
            NZ = input.ReadFloat();
            break;
          }
          case 104: {
            BChangeLine = input.ReadBool();
            break;
          }
          case 114: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-11 切换线路
  /// </summary>
  public sealed partial class ChangeLine : pb::IMessage<ChangeLine> {
    private static readonly pb::MessageParser<ChangeLine> _parser = new pb::MessageParser<ChangeLine>(() => new ChangeLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLine(ChangeLine other) : this() {
      nMapID_ = other.nMapID_;
      nLineID_ = other.nLineID_;
      nGameID_ = other.nGameID_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLine Clone() {
      return new ChangeLine(this);
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 1;
    private int nMapID_;
    /// <summary>
    /// 目标地图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "nLineID" field.</summary>
    public const int NLineIDFieldNumber = 2;
    private int nLineID_;
    /// <summary>
    /// 目标线路ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLineID {
      get { return nLineID_; }
      set {
        nLineID_ = value;
      }
    }

    /// <summary>Field number for the "nGameID" field.</summary>
    public const int NGameIDFieldNumber = 3;
    private int nGameID_;
    /// <summary>
    /// 返回的逻辑ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGameID {
      get { return nGameID_; }
      set {
        nGameID_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::SvrData.LoadPlayerData data_;
    /// <summary>
    /// 玩家数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SvrData.LoadPlayerData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NMapID != other.NMapID) return false;
      if (NLineID != other.NLineID) return false;
      if (NGameID != other.NGameID) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (NLineID != 0) hash ^= NLineID.GetHashCode();
      if (NGameID != 0) hash ^= NGameID.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NMapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NMapID);
      }
      if (NLineID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NLineID);
      }
      if (NGameID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NGameID);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (NLineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLineID);
      }
      if (NGameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGameID);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeLine other) {
      if (other == null) {
        return;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.NLineID != 0) {
        NLineID = other.NLineID;
      }
      if (other.NGameID != 0) {
        NGameID = other.NGameID;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::SvrData.LoadPlayerData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NMapID = input.ReadInt32();
            break;
          }
          case 16: {
            NLineID = input.ReadInt32();
            break;
          }
          case 24: {
            NGameID = input.ReadInt32();
            break;
          }
          case 34: {
            if (data_ == null) {
              data_ = new global::SvrData.LoadPlayerData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0-12 切换线路返回
  /// </summary>
  public sealed partial class ChangeLineRet : pb::IMessage<ChangeLineRet> {
    private static readonly pb::MessageParser<ChangeLineRet> _parser = new pb::MessageParser<ChangeLineRet>(() => new ChangeLineRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeLineRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLineRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLineRet(ChangeLineRet other) : this() {
      nCode_ = other.nCode_;
      nMapID_ = other.nMapID_;
      nLineID_ = other.nLineID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLineRet Clone() {
      return new ChangeLineRet(this);
    }

    /// <summary>Field number for the "nCode" field.</summary>
    public const int NCodeFieldNumber = 1;
    private int nCode_;
    /// <summary>
    /// 返回的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCode {
      get { return nCode_; }
      set {
        nCode_ = value;
      }
    }

    /// <summary>Field number for the "nMapID" field.</summary>
    public const int NMapIDFieldNumber = 2;
    private int nMapID_;
    /// <summary>
    /// 要去的逻辑服ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMapID {
      get { return nMapID_; }
      set {
        nMapID_ = value;
      }
    }

    /// <summary>Field number for the "nLineID" field.</summary>
    public const int NLineIDFieldNumber = 3;
    private int nLineID_;
    /// <summary>
    /// 要去的线路ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLineID {
      get { return nLineID_; }
      set {
        nLineID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeLineRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeLineRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCode != other.NCode) return false;
      if (NMapID != other.NMapID) return false;
      if (NLineID != other.NLineID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCode != 0) hash ^= NCode.GetHashCode();
      if (NMapID != 0) hash ^= NMapID.GetHashCode();
      if (NLineID != 0) hash ^= NLineID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCode);
      }
      if (NMapID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NMapID);
      }
      if (NLineID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NLineID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCode);
      }
      if (NMapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMapID);
      }
      if (NLineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLineID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeLineRet other) {
      if (other == null) {
        return;
      }
      if (other.NCode != 0) {
        NCode = other.NCode;
      }
      if (other.NMapID != 0) {
        NMapID = other.NMapID;
      }
      if (other.NLineID != 0) {
        NLineID = other.NLineID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCode = input.ReadInt32();
            break;
          }
          case 16: {
            NMapID = input.ReadInt32();
            break;
          }
          case 24: {
            NLineID = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChangeLineRet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EC {
        [pbr::OriginalName("EC_OTHER")] Other = 0,
        [pbr::OriginalName("EC_SUCC")] Succ = 1,
        [pbr::OriginalName("EC_FAIL")] Fail = 2,
        /// <summary>
        ///分配server失败
        /// </summary>
        [pbr::OriginalName("EC_SERVER")] Server = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// 0-13 踢下玩家
  /// </summary>
  public sealed partial class KickClient : pb::IMessage<KickClient> {
    private static readonly pb::MessageParser<KickClient> _parser = new pb::MessageParser<KickClient>(() => new KickClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SvrData.ServerMsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickClient(KickClient other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickClient Clone() {
      return new KickClient(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickClient other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
